#pragma once

#ifndef ILS_BaseLoggerH
#define ILS_BaseLoggerH

#include <string>
#include <chrono>
#include "ILS_Logger.h"

/// Базовая реализация большинства методов интерфейса \c ILogger.
/// @ingroup Kernel
/// Данный класс реализует некоторые простым, стандартным образом основные 
/// механизмы интрефейса \c ILogger. <i> При реализации механизма регистрации хода процессов, 
/// удобнее наследоваться именно от \c BaseLogger, а не непосредственно от \c ILogger. </i>
/// Данный класс реализует:
/// - формирование заголовка сообщений;
/// - элементарные настройки формата сообщений.
/// \see ILogger , StdLogger
class BaseLogger : public ILogger {
	//---------------------------------------------------------------------------
protected: // Управляющие аттрибуты
	/// Общее количество ошибок зафиксированных этим логгером.
	mutable unsigned int errors = 0;
	/// Общее количество предупреждеий зафиксированных этим логгером.
	mutable unsigned int warnings = 0;
	//---------------------------------------------------------------------------
public: // Конструктор
	BaseLogger();
	//---------------------------------------------------------------------------
public: // Настройки StdLogger-а
	/// Маска битов, определяющая что именно выводить в заголовке.
	///  - 1 выводить дату
	///  - 2 выводить время
	///  - 4 выводить количество секунд с начала
	mutable unsigned int show_info;
	/// Флаг того, что стартовали отсчёт времени
	mutable bool bStarted;
	/// Флаг того, что нужно выводить лог в консоль
	mutable bool bLogToConsole;
	/// Время начала работы.
	mutable std::chrono::steady_clock::time_point start_time;
protected: // Функции интерфейса
	//---------------------------------------------------------------------------
	// Регистрация сообщения для анализатора логов
	void infOut(const Msg& msg, const LogId& id) const override;
	// Регистрация информационного сообщения
	void logOut(const Msg& msg, const LogId& id) const override;
	// Регистрация предупреждения (warning) и не фатальной ошибки
	void wrnOut(const Msg& msg, const LogId& id) const override;
	// Регистрация фатальной ошибки, после которой результаты процесса не определены
	void errOut(const Msg& msg, const LogId& id) const override;
protected: // Вспомогательные функции
	virtual void ConsoleOut(const std::string& msg) const;
	/// Создание строки со стандартным заголовком для сообщения.
	/// Создается общая для всех типов сообщений строка с заголовком на основе 
	/// значений настроек.
	/// \note Эту функцию можно переопределить, в случае необходимости 
	/// генерировать заголовок сообщения отличный  от стандартного.
	/// \see log() , wrn() , error() 
	virtual std::string title() const;
	/// Создание строки со стандартным заголовком для информационного сообщения.
	/// Создание строки со стандартным заголовком для информационного сообщения.
	/// \note Эту функцию можно переопределить, в случае необходимости 
	/// генерировать заголовок сообщения отличный  от стандартного.
	virtual std::string lTitle() const;
	/// Создание строки со стандартным заголовком для информационного сообщения.
	/// Создание строки со стандартным заголовком для информационного сообщения.
	/// \note Эту функцию можно переопределить, в случае необходимости 
	/// генерировать заголовок сообщения отличный  от стандартного.
	virtual std::string iTitle() const;
	/// Создание строки со стандартным заголовком для анализатора логов.
	/// Создание строки со стандартным заголовком для анализатора логов.
	/// \note Эту функцию можно переопределить, в случае необходимости 
	/// генерировать заголовок сообщения отличный от стандартного.
	virtual std::string wTitle() const;
	/// Создание строки со стандартным заголовком для ошибки.
	/// Создание строки со стандартным заголовком для ошибки.
	/// \note Эту функцию можно переопределить, в случае необходимости 
	/// генерировать заголовок сообщения отличный  от стандартного.
	virtual std::string eTitle() const;
}; // BaseLogger

#endif // ILS_BaseLoggerH
