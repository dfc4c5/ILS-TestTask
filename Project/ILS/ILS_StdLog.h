#pragma once

#ifndef ILS_StdLoggerH
#define ILS_StdLoggerH

#include <iostream>
#include "ILS_BaseLogger.h"

//=============================================================================
/// Реализация регистратора хода процесса (Логгера) для потоков.
/// @ingroup Kernel
/// Реализация регистратора хода процесса (Логгера) для стандартных потоков
/// библиотеки STL. Данный класс наследован от класса BaseLogger и сохраняет
/// всю его функциональность, переопределив только функции вывода сообщений так,
/// чтобы реальный вывод осуществлялся на потоки вывода библиотеки STL переданные
/// в конструкторе данного класса.
/// \see ILogger , BaseLogger
class StdLogger : public BaseLogger {
protected:
	using BaseLogger::bLogToConsole;
	// Потоки для вывода информационных сообщений, предупрежнений и ошибок
	mutable std::ostream* log_out, * wrn_out, * err_out;
	bool l_del, w_del, e_del;
	//---------------------------------------------------------------------------
public: // Конструктор
	/// Конструктор.
	/// Конструировние Логгера на потоки вывода библиотеки STL.
	/// \param l_out - поток для вывода информационных сообщений.
	/// \param w_out - поток для вывода предупреждений.
	/// \param e_out - поток для вывода ошибок.
	StdLogger(std::ostream& l_out = std::cout,
		std::ostream& w_out = std::cerr,
		std::ostream& e_out = std::cerr);

	//---------------------------------------------------------------------------
	/// Конструктор по имени файла для инф. сообщений.
	/// Конструировние Логгера на потоки вывода библиотеки STL.
	/// \param l_out_file - Имя файла для вывода log информации.
	/// \param w_out - поток для вывода предупреждений.
	/// \param e_out - поток для вывода ошибок.
	/// 
	/// \note Если в качестве имени файла (первого параметра) передается "", 
	/// это значит, что информационные сообщения должны ингорироваться, а выводится 
	/// только предупреждения и ошибки.
	StdLogger(std::string l_out_file,
		std::ostream& w_out = std::cerr,
		std::ostream& e_out = std::cerr,
		std::ios_base::openmode mode = std::ios_base::out);
	//---------------------------------------------------------------------------
	/// Конструктор по имени файла для инф. сообщений и предупрждений.
	/// Конструировние Логгера на потоки вывода библиотеки STL.
	/// \param l_out_file - Имя файла для вывода log информации.
	/// \param w_out_file - Имя файла для вывода предупреждений.
	/// \param e_out - поток для вывода ошибок.
	/// 
	/// \note Если в качестве имени файла передается "", 
	/// это значит, что сообщения такого типа должны ингорироваться, а выводится 
	/// будут только другие сообщения.
	StdLogger(std::string l_out_file,
		std::string w_out_file,
		std::ostream& e_out = std::cerr,
		std::ios_base::openmode mode = std::ios_base::out);
	//---------------------------------------------------------------------------
	/// Конструктор по имени файла для всех сообщений.
	/// Конструировние Логгера на потоки вывода библиотеки STL.
	/// \param l_out_file - Имя файла для вывода log информации.
	/// \param w_out_file - Имя файла для вывода предупреждений.
	/// \param e_out_file - Имя файла для вывода ошибок.
	/// 
	/// \note Если в качестве имени файла передается "", 
	/// это значит, что сообщения такого типа должны ингорироваться, а выводится 
	/// будут только другие сообщения.
	StdLogger(std::string l_out_file,
		std::string w_out_file,
		std::string e_out_file,
		std::ios_base::openmode mode = std::ios_base::out);
	//---------------------------------------------------------------------------
	/// Конструктор копирования.
	StdLogger(const StdLogger& src);
	//---------------------------------------------------------------------------
	/// Виртуальный деструктор.
	virtual ~StdLogger();
	//---------------------------------------------------------------------------
protected: // Функиции механизма вывода
	virtual void ConsoleOut(const std::string& msg) const;
	virtual void lOut(const std::string& msg) const;
	virtual void wOut(const std::string& msg) const;
	virtual void eOut(const std::string& msg) const;
}; // class StdLogger

#endif // ILS_StdLoggerH
